<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Chashmeet Singh]]></title><description><![CDATA[This is a blog maintained to post my weekly accomplishments in GSOC.]]></description><link>https://chashmeetsingh.github.io</link><image><url>http://melissavandyke.com/wp-content/uploads/2015/09/code.jpg</url><title>Chashmeet Singh</title><link>https://chashmeetsingh.github.io</link></image><generator>RSS for Node</generator><lastBuildDate>Sat, 20 May 2017 07:30:03 GMT</lastBuildDate><atom:link href="https://chashmeetsingh.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[iOS Client Features]]></title><description><![CDATA[<div class="sect2">
<h3 id="_what_feature_are_we_talking_about">What feature are we talking about?</h3>
<div class="paragraph">
<p>We are going to discuss only one feature this time, we will see the rest next time. It is:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Calculation of the height and width of the Chat Message Bubble</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>So let&#8217;s start first with the implementation of the movement made by the message container when the keyboard is toggled.</p>
</div>
<div class="paragraph">
<p>Now, in order to detect whether the keyboard is showing or not, we need an observer that watches the showing and hiding of the keyboard at all times.</p>
</div>
<div class="paragraph">
<p>So here are the two method we use:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>NotificationCenter.default.addObserver(self, selector: #selector(handleKeyboardNotification), name: NSNotification.Name.UIKeyboardWillShow, object: nil)

NotificationCenter.default.addObserver(self, selector: #selector(handleKeyboardNotification), name: NSNotification.Name.UIKeyboardWillHide, object: nil)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Let&#8217;s break these down.</p>
</div>
<div class="paragraph">
<p>The first one adds an observer which watches whether the keyboard is open or not and based on that calls a method. Here the <code>NSNotification.Name.UIKeyboardWillShow</code> Notification is used to detect this.</p>
</div>
<div class="paragraph">
<p>Same goes for the second observer but here we use the <code>NSNotification.Name.UIKeyboardWillHide</code> Notification.</p>
</div>
<div class="paragraph">
<p>Both these observer when observe the change, call a method <code>handleKeyboardNotification</code> which we are going to checkout next.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s start developing this function.</p>
</div>
<div class="paragraph">
<p>So, what exactly do we need next?
We need the keyboard&#8217;s height so that we can add / subtract it to the <code>bottomConstraint</code> that holds the message container at the bottom based on whether the keyboard is showing or not.</p>
</div>
<div class="paragraph">
<p>This method takes in the <code>NSNotification</code> paramter, which is to get the <code>userInfo</code> from the notification, like this:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>let userInfo = notification.userInfo</pre>
</div>
</div>
<div class="paragraph">
<p>Let&#8217;s grab the keyboard height next. For grabbing this we use the <code>UIKeyboardFrameEndUserInfoKey</code> key inside the <code>userInfo</code> we just obtained above. Next, we need to convert this to a rectangle so that we get the frame of the keyboard. We do this by using the <code>cgRectValue</code> attribute which returns the CoreGraphics rectangle structure.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>let keyboardFrame = (userInfo[UIKeyboardFrameEndUserInfoKey] as AnyObject).cgRectValue</pre>
</div>
</div>
<div class="paragraph">
<p>Next let&#8217;s check whether the keyboard is being shown or hidden.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>let isKeyboardShowing = notification.name == NSNotification.Name.UIKeyboardWillShow</pre>
</div>
</div>
<div class="paragraph">
<p>The <code>notification.name == NSNotification.Name.UIKeyboardWillShow</code> would return <code>true</code> or <code>false</code> by checking the <code>name</code> attribute of the notification that called this function.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s set the bottom constraint for the message container now.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>bottomConstraint?.constant = isKeyboardShowing ? -keyboardFrame!.height : 0</pre>
</div>
</div>
<div class="paragraph">
<p>Here, we check the <code>isKeyboardShowing</code> bool we defined above and based on that we assign the bottom constraint to the bottom of the keyboard if the keyboard is being shown, else we restore it to be at the bottom of the screen.</p>
</div>
<div class="paragraph">
<p>Now, in order to test this functionality we do two things:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Make a function that subscribes to the notifications</p>
<div class="literalblock">
<div class="content">
<pre>func subscribeToKeyboardNotifications() {
    NotificationCenter.default.addObserver(self, selector: #selector(handleKeyboardNotification), name: NSNotification.Name.UIKeyboardWillShow, object: nil)
    NotificationCenter.default.addObserver(self, selector: #selector(handleKeyboardNotification), name: NSNotification.Name.UIKeyboardWillHide, object: nil)
}</pre>
</div>
</div>
</li>
<li>
<p>Call this function inside <code>viewDidLoad()</code></p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Now, we are actually done with the functionality and if we try to run this we will observe that the frame does change but it takes some time for the keyboard to show up.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://i.imgur.com/EQS8OPq.gif" alt="Imgur">
</div>
</div>
<div class="paragraph">
<p><em>Note: We have enabled <code>Slow Animations</code> for the simulator to view this better.</em></p>
</div>
<div class="paragraph">
<p>What we can do to resoleve this is, we use the animate method of <code>UIView</code> as follows.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>UIView.animate(withDuration: 0, delay: 0, options: UIViewAnimationOptions.curveEaseOut, animations: {
            self.view.layoutIfNeeded()
}, completion: nil)</pre>
</div>
</div>
<div class="paragraph">
<p>Here, we set the duration to <code>0</code> so that the animation happens without any delay and inside the <code>animations</code> block we have made a call to <code>self.view.layoutIfNeeded</code> which helps to lay out subviews immediately and we have passed <code>nil</code> to the completion block.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s check the working of the feature:</p>
</div>
<div class="imageblock">
<div class="content">
<img src="http://i.imgur.com/EqJ26aU.gif" alt="Imgur">
</div>
</div>
</div>
<div class="sect1">
<h2 id="_awesome">Awesome!</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Here we finish up the blog post for this week. See you next time!</p>
</div>
</div>
</div>]]></description><link>https://chashmeetsingh.github.io/2017/05/20/iOS-Client-Features.html</link><guid isPermaLink="true">https://chashmeetsingh.github.io/2017/05/20/iOS-Client-Features.html</guid><dc:creator><![CDATA[Chashmeet Singh]]></dc:creator><pubDate>Sat, 20 May 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Susi AI Skill Development]]></title><description><![CDATA[<div class="sect1">
<h2 id="_what_is_susi">What is Susi?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Susi is an open source intelligent personal assistant which has the capability to learn and respond better to queries. It is also capable of making to-do lists, setting alarms, providing weather and traffic info all in real time. Susi responds based on skills.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_is_a_skill_how_do_we_teach_a_skill">What is a skill? How do we teach a skill?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>A skill is a piece of code which performs a set of actions in order to respond to the user’s query. These skills are based on pattern matching which help them mapping the user’s query to a specific skill and responding accordingly. Teaching a skill to Susi is surprisingly very easy to implement. One can take a look at the Susi Skill Development Tutorial and a video workshop by Michael Christen.</p>
</div>
<div class="paragraph">
<p>I will try to give a basic idea on how to create a skill, it’s basic structure and some of the skills I developed in the first week.</p>
</div>
<div class="sect2">
<h3 id="_prepare_to_create_a_skill">Prepare to create a skill:</h3>
<div class="paragraph">
<p>Head over to <a href="http://dream.susi.ai" class="bare">http://dream.susi.ai</a>
Create a etherpad with some relevant name
Delete all text currently present in there
Start writing your skill
Adding to this, for testing a skill one can head over to Susi Web Chat Interface.</p>
</div>
<div class="paragraph">
<p>Basic Structure for calling an API:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>&lt;Regular expression to be matched here&gt;
!console:&lt;response given to the user&gt;
{
  "url":"&lt;API endpoint&gt;",
  "path":"&lt;Json path here&gt;"
}
eol</pre>
</div>
</div>
<div class="paragraph">
<p>So, let me explain this line by line.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The regular expression is the one to which the user’s query is matched first.</p>
</li>
<li>
<p>The console is meant to output the actual response the user sees as response.</p>
</li>
<li>
<p>In place of the <em>url</em>, the API endpoint is passed in.
“path” here specifies how we traverse through the response Json or Jsonp to get the object, starts with <em>$.</em>.</p>
</li>
<li>
<p>At last, <em>eol</em> which is the end-of-line marks the end of a skill.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Let’s take an example for better understanding of this:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>random gif
!console: $url$
{
    "url" : "http://api.giphy.com/v1/gifs/trending?api_key=dc6zaTOxFJmzC",
    "path" : "$.data[0].images.fixed_height"
}
eol</pre>
</div>
</div>
<div class="paragraph">
<p><strong>This skill responds with a link to a random gif.</strong></p>
</div>
<div class="paragraph">
<p>Steps involved:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Match the string <em>random gif</em> with the user’s query.</p>
</li>
<li>
<p>On successful match, make an API call to the API endpoint specified in <em>url</em></p>
</li>
<li>
<p>On response, extract the object at the specified path in the json under <em>path</em></p>
</li>
<li>
<p>Respond to the user with the <em>url</em> key’s value which would here be an URL of a GIF.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Let’s try it out on <a href="http://susi.ai/chat">Susi Web Chat</a>. For this, you will first have to load your skill using the dream command followed by etherpad name:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>dream &lt;etherpad name&gt;</pre>
</div>
</div>
<div class="paragraph">
<p>And then you can start testing your skill.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://github.com/chashmeetsingh/chashmeetsingh.github.io/blob/master/images/random-gif.png?raw=true" alt="Random GIF">
</div>
</div>
<div class="paragraph">
<p>So, we queried <em>random gif</em> and we got a response <em>Click Here!</em>. The complete URL didn’t show up because all the URLs are currently parsed and a hyperlink for each is created. So try clicking on it to find a GIF.</p>
</div>
<div class="paragraph">
<p>Now, let’s look at one more skill I developed during this period.</p>
</div>
<div class="literalblock">
<div class="content">
<pre>#Returns the name of the president of a country
president of *|who is the president of *| president *
!console:$plaintext$
{      "url":"https://api.wolframalpha.com/v2/query?input=president+$1$&amp;output=JSON&amp;appid=9WA6XR-26EWTGEVTE&amp;includepodid=Result",
  "path" : "$.queryresult.pods[0].subpods[0]"
}
eol</pre>
</div>
</div>
<div class="paragraph">
<p>Let’s understand this step by step:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>We have here president of \*|who is the president of *| president *, which means the user’s query matches with anyone of the following because of the use of pipe symbol <em>|</em>. The <em>*</em> here replaces a word or a list of words, which can be accessed like: <em>${index}$</em>  where index is replaced by the position of the <em>*</em> in the expression starting from 1.</p>
</li>
<li>
<p>Now we have something new in the URL. See that  <em>$1$</em>  inside the URL? On runtime, that is replaced with the content of the <em>*</em> variable. So if a user puts in query like: <em>president of usa</em>, <em>usa</em> is mapped to <em>$1$</em> and is replaced in the URL and appropriate API request is made.</p>
</li>
<li>
<p>Then the path is traversed in the json response and the value of the <em>plaintext</em> key is used to respond to the user.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>It’s now time to try it out on <a href="http://susi.ai/chat">Susi Web Chat</a>.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://github.com/chashmeetsingh/chashmeetsingh.github.io/blob/master/images/president.png?raw=true" alt="President">
</div>
</div>
<div class="paragraph">
<p>So, we got our desired response here, i.e., the name of the president of usa.</p>
</div>
</div>
</div>
</div>]]></description><link>https://chashmeetsingh.github.io/2017/05/13/Susi-AI-Skill-Development.html</link><guid isPermaLink="true">https://chashmeetsingh.github.io/2017/05/13/Susi-AI-Skill-Development.html</guid><dc:creator><![CDATA[Chashmeet Singh]]></dc:creator><pubDate>Sat, 13 May 2017 00:00:00 GMT</pubDate></item></channel></rss>